---
compat: v0
id: lnd
version: 0.11.1
title: Lightning Network Daemon
description:
  short: "A complete implementation of a Lightning Network node by Lightning Labs"
  long: "LND fully conforms to the Lightning Network specification (BOLTs). BOLT stands for: Basis of Lightning Technology. In the current state lnd is capable of: creating channels, closing channels, managing all channel states (including the exceptional ones!), maintaining a fully authenticated+validated channel graph, performing path finding within the network, passively forwarding incoming payments, sending outgoing onion-encrypted payments through the network, updating advertised fee schedules, and automatic channel management (autopilot)."
release-notes: https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta
ports:
  - internal: 8080
    tor: 8080
  - internal: 9735
    tor: 9735
  - internal: 9911
    tor: 9911
  - internal: 10009
    tor: 10009
image:
  type: tar
mount: /root/.lnd
public: public
has-instructions: true
os-version-required: ">=0.2.5"
os-version-recommended: ">=0.2.5"
assets: []
hidden-service-version: v3
dependencies:
  btc-rpc-proxy:
    version: "^0.2.0"
    optional: Can alternatively configure an external bitcoin node.
    description: Used to fetch validated blocks.
    config:
      - rule: '''users.*.name = "lnd"'
        description: 'Must have an RPC user named "lnd"'
        suggestions:
          - PUSH:
              to: "users"
              value:
                name: lnd
                allowed-calls: []
          - SET:
              var: 'users.[first(item => ''item.name = "lnd")].password'
              to-entropy:
                charset: "a-z,A-Z,0-9"
                len: 22
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getinfo"'
        description: 'RPC user "lnd" must have "getinfo" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getinfo"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getbestblockhash"'
        description: 'RPC user "lnd" must have "getbestblockhash" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getbestblockhash"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "gettxout"'
        description: 'RPC user "lnd" must have "gettxout" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "gettxout"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblockchaininfo"'
        description: 'RPC user "lnd" must have "getblockchaininfo" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getblockchaininfo"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "sendrawtransaction"'
        description: 'RPC user "lnd" must have "sendrawtransaction" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "sendrawtransaction"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblockhash"'
        description: 'RPC user "lnd" must have "getblockhash" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getblockhash"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblock"'
        description: 'RPC user "lnd" must have "getblock" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getblock"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblockheader"'
        description: 'RPC user "lnd" must have "getblockheader" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getblockheader"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "estimatesmartfee"'
        description: 'RPC user "lnd" must have "estimatesmartfee" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "estimatesmartfee"
      - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getnetworkinfo"'
        description: 'RPC user "lnd" must have "getnetworkinfo" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
              value: "getnetworkinfo"
      - rule: 'users.[first(item => ''item.name = "lnd")].fetch-blocks?'
        description: 'RPC user "lnd" must have "Fetch Blocks" enabled'
        suggestions:
          - SET:
              var: 'users.[first(item => ''item.name = "lnd")].fetch-blocks'
              to-value: true
  bitcoind:
    version: "^0.20.1.1"
    optional: Can alternatively configure an external bitcoin node.
    description: Used to subscribe to new block events.
    config:
      - rule: "zmq-enabled?"
        description: "Must have an ZeroMQ enabled"
        suggestions:
          - SET:
              var: "zmq-enabled"
              to-value: true
