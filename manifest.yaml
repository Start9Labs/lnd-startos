id: lnd
title: Lightning Network Daemon
version: 0.13.0.5
release-notes: "Upgrade to EmbassyOS v0.3.0"
license: mit
wrapper-repo: "https://github.com/Start9Labs/lnd-wrapper"
upstream-repo: "https://github.com/lightningnetwork/lnd"
support-site: "https://github.com/lightningnetwork/lnd/issues"
marketing-site: "https://lightning.engineering/"
build: ["make"]
min-os-version: "0.3.0"
description:
  short: A complete implementation of a Lightning Network node by Lightning Labs
  long: |
   LND fully conforms to the Lightning Network specification (BOLTs). BOLT stands for: Basis of Lightning Technology. In the current state lnd is capable of: creating channels, closing channels, managing all channel states (including the exceptional ones!), maintaining a fully authenticated+validated channel graph, performing path finding within the network, passively forwarding incoming payments, sending outgoing onion-encrypted payments through the network, updating advertised fee schedules, and automatic channel management (autopilot).
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  docker-images: image.tar
  icon-type: png
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  # specifices where to put the volumes
  mounts:
    bitcoind: "/mnt/bitcoind"
    btc-rpc-proxy: "/mnt/btc-rpc-proxy"
  io-format: yaml
health-checks: {}
config:
  get:
    type: docker
    image: compat
    entrypoint: compat
    args: 
      - "config"
      - "get"
      - "/root/.lnd/start9/config.yaml"
      - "/mnt/assets/config_spec.yaml"
    mounts:
      compat: "/mnt/assets"
      main: "/root"
    io-format: yaml
  set:
    type: docker
    image: compat
    entrypoint: compat
    args:
      - "config"
      - "set"
      - "/root/.lnd/start9/config.yaml"
    mounts:
      main: "/root"
    io-format: yaml
dependencies:
  btc-rpc-proxy:
    version: ">=0.3.2.1 <0.4.0"
    recommended: true
    critical: false
    optional: Can alternatively configure an external bitcoin node.
    description: Used to fetch validated blocks.
    config:
      check: 
        type: docker
        image: compat
        system: true
        # the compat image will contain a tool to check the config rules against the specified dependency
        entrypoint: compat
        args:
          - "dependency"
          - "check"
          - "/mnt/assets/btc-rpc-proxy.rules.yaml"
        mounts:
          compat: "/mnt/assets"  
      auto-configure:
        type: docker
        image: compat
        # if true, the denoted image is prebuilt and comes stock with EOS
        # uncommon: if you want something not prebuilt with EOS, you can bundle multiple docker images into the `image.tar` during the `make` build process
        system: true
        entrypoint: compat
        args:
          - "dependency"
          - "auto-configure"
          - "/mnt/assets/btc-rpc-proxy.rules.yaml"
        mounts:
          compat: "/mnt/assets"          
  bitcoind:
    version: "^0.21.1.2"
    recommended: true
    critical: true
    optional: Can alternatively configure an external bitcoin node.
    description: Used to subscribe to new block events.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - "dependency"
          - "check"
          - "/mnt/assets/bitcoind.rules.yaml"
        mounts:
          compat: "/mnt/assets"  
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - "dependency"
          - "check"
          - "/mnt/assets/bitcoind.rules.yaml"
        mounts:
          compat: "/mnt/assets"  
volumes:
  # this is the image where data will go from 0.2.x
  main:
    type: data
  # this is the image where files from the project asset directory will go
  compat:
    type: assets
  # this is a pointer volume, where the image is specified in `<pointer-id>.volume-id` and the mount point is specificed in `main.mounts.<pointer-id>`
  bitcoind:
    type: pointer
    package-id: bitcoind
    volume-id: main
    path: "/root"
    readonly: true
  btc-rpc-proxy:
    type: pointer
    package-id: btc-rpc-proxy
    volume-id: main
    path: "/root"
    readonly: false
  certificates: {} #TODO
alerts:
  install: |
    READ CAREFULLY! LND and the Lightning Network are considered beta software. Please use with caution and do not risk more money than you are willing to lose. We encourage frequent backups. If for any reason, you need to restore LND from a backup, your on-chain wallet will be restored, but all your channels will be closed and their funds returned to your on-chain wallet, minus fees. It may also take some time for this process to occur.
  uninstall: "READ CAREFULLY! Uninstalling LND will result in permanent loss of data, including its private keys for its on-chain wallet and all channel states. Please make a backup if you have any funds in your on-chain wallet or in any channels. Recovering from backup will restore your on-chain wallet, but due to the architecture of the Lightning Network, your channels cannot be recovered. All your channels will be closed and their funds returned to your on-chain wallet, minus fees. \n"
  restore: |
    Restoring LND will overwrite its current data, including its on-chain wallet and channels. Any channels opened since the last backup will be forgotten and may linger indefinitely, and channels contained in the backup will be closed and their funds returned to your on-chain wallet, minus fees.
interfaces:
  rest:
    name: REST Interface
    description: Specifies the interfaces to listen on for REST connections.
    tor-config:
      port-mapping:
        8080: "8080"
    ui: false
    protocols:
      - tcp
      - http
  watchtower:
    name: Watchtower Interface
    description: Specifies the interfaces to listen on for watchtower client connections.
    tor-config:
        port-mapping:
          9911: "9911"
    ui: false
    protocols:
      - tcp
      - http
  grpc:
    name: gRPC Interface
    description: Specifies the interfaces to listen on for gRPC connections.
    tor-config:
        port-mapping:
          10009: "10009"
    ui: false
    protocols:
      - tcp
      - grpc
  peer:
    name: Peer Interface
    description: Specifies the interfaces to listen on for p2p connections.
    tor-config:
        port-mapping:
          9735: "9735"
    ui: false
    protocols:
      - tcp
      - http
backup:
  create:
    type: docker
    # default backup process is duplicity - EOS will have access to this image
    image: duplicity
    system: true
    # command to run the backup executable, in this case, duplicity
    entrypoint: duplicity
    # arguments to pass into the entrypoint ie. duplicity in this case
    # thus, the full commamnd run will be: `duplicity /root file:///mnt/backup`
    args:
      - /root
      - file:///mnt/backup
    mounts:
      # BACKUP is the default volume that is used for backups - this is whatever backup drive is mounted to the device, or a network filesystem
      # the value here denotes where the data mount point will be
      # mounts backup drive to this location, which contains previous backups
      BACKUP: "/mnt/backup"
      main: "/root/.lnd"
  restore:
    type: docker
    image: duplicity
    system: true
    entrypoint: duplicity
    args:
      - file:///mnt/backup
      - /root
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/.lnd"