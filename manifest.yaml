id: lnd
title: Lightning Network Daemon
version: 0.13.0.5
release-notes: "Upgrade to EmbassyOS v0.3.0"
license: mit
wrapper-repo: "https://github.com/Start9Labs/lnd-wrapper"
upstream-repo: "https://github.com/lightningnetwork/lnd"
support-site: "https://github.com/lightningnetwork/lnd/issues"
marketing-site: "https://lightning.engineering/"
build: ["make"]
min-os-version: "0.3.0"
description:
  short: A complete implementation of a Lightning Network node by Lightning Labs
  long: |
   LND fully conforms to the Lightning Network specification (BOLTs). BOLT stands for: Basis of Lightning Technology. In the current state lnd is capable of: creating channels, closing channels, managing all channel states (including the exceptional ones!), maintaining a fully authenticated+validated channel graph, performing path finding within the network, passively forwarding incoming payments, sending outgoing onion-encrypted payments through the network, updating advertised fee schedules, and automatic channel management (autopilot).
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  docker-images: image.tar
  icon-type: png
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts: {}
  io-format: yaml
health-checks: {}
config:
  get:
    type: docker
    image: compat
    entrypoint: config
    args: 
      - "get"
      - "/root/.lnd"
    mounts: {}
    io-format: yaml
  set:
    type: docker
    image: compat
    entrypoint: config
    args:
      - "set"
      - "/root/.lnd"
    mounts: {}
    io-format: yaml
dependencies:
  btc-rpc-proxy:
    version: ">=0.3.2.1 <0.4.0"
    recommended: true
    critical: false
    optional: Can alternatively configure an external bitcoin node.
    description: Used to fetch validated blocks.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: "true"
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: "true"
        implementation:
          - rule: '''users.*.name = "lnd"'
            description: 'Must have an RPC user named "lnd"'
            suggestions:
              - PUSH:
                  to: "users"
                  value:
                    name: lnd
                    allowed-calls: []
              - SET:
                  var: 'users.[first(item => ''item.name = "lnd")].password'
                  to-entropy:
                    charset: "a-z,A-Z,0-9"
                    len: 22
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getinfo"'
            description: 'RPC user "lnd" must have "getinfo" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getinfo"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getbestblockhash"'
            description: 'RPC user "lnd" must have "getbestblockhash" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getbestblockhash"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "gettxout"'
            description: 'RPC user "lnd" must have "gettxout" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "gettxout"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblockchaininfo"'
            description: 'RPC user "lnd" must have "getblockchaininfo" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getblockchaininfo"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "sendrawtransaction"'
            description: 'RPC user "lnd" must have "sendrawtransaction" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "sendrawtransaction"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblockhash"'
            description: 'RPC user "lnd" must have "getblockhash" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getblockhash"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblock"'
            description: 'RPC user "lnd" must have "getblock" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getblock"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getblockheader"'
            description: 'RPC user "lnd" must have "getblockheader" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getblockheader"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "estimatesmartfee"'
            description: 'RPC user "lnd" must have "estimatesmartfee" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "estimatesmartfee"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getnetworkinfo"'
            description: 'RPC user "lnd" must have "getnetworkinfo" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getnetworkinfo"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "uptime"'
            description: 'RPC user "lnd" must have "uptime" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "uptime"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getrawtransaction"'
            description: 'RPC user "lnd" must have "getrawtransaction" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getrawtransaction"
          - rule: '''users.[first(item => ''item.name = "lnd")].allowed-calls.* = "getpeerinfo"'
            description: 'RPC user "lnd" must have "getpeerinfo" enabled'
            suggestions:
              - PUSH:
                  to: 'users.[first(item => ''item.name = "lnd")].allowed-calls'
                  value: "getpeerinfo"
          - rule: 'users.[first(item => ''item.name = "lnd")].fetch-blocks?'
            description: 'RPC user "lnd" must have "Fetch Blocks" enabled'
            suggestions:
              - SET:
                  var: 'users.[first(item => ''item.name = "lnd")].fetch-blocks'
                  to-value: true
  bitcoind:
    version: "^0.21.1.2"
    recommended: true
    critical: true
    optional: Can alternatively configure an external bitcoin node.
    description: Used to subscribe to new block events.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: "true"
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: "true"
        implementation:
          - rule: "zmq-enabled?"
            description: "Must have an ZeroMQ enabled"
            suggestions:
              - SET:
                  var: "zmq-enabled"
                  to-value: true
volumes:
  bitcoind:
    type: pointer
    package-id: bitcoind
    volume-id: main
    path: "/root"
    readonly: true
  btc-rpc-proxy:
    type: pointer
    package-id: btc-rpc-proxy
    volume-id: main
    path: "/root"
    readonly: false
alerts:
  install: |
    READ CAREFULLY! LND and the Lightning Network are considered beta software. Please use with caution and do not risk more money than you are willing to lose. We encourage frequent backups. If for any reason, you need to restore LND from a backup, your on-chain wallet will be restored, but all your channels will be closed and their funds returned to your on-chain wallet, minus fees. It may also take some time for this process to occur.
  uninstall: "READ CAREFULLY! Uninstalling LND will result in permanent loss of data, including its private keys for its on-chain wallet and all channel states. Please make a backup if you have any funds in your on-chain wallet or in any channels. Recovering from backup will restore your on-chain wallet, but due to the architecture of the Lightning Network, your channels cannot be recovered. All your channels will be closed and their funds returned to your on-chain wallet, minus fees. \n"
  restore: |
    Restoring LND will overwrite its current data, including its on-chain wallet and channels. Any channels opened since the last backup will be forgotten and may linger indefinitely, and channels contained in the backup will be closed and their funds returned to your on-chain wallet, minus fees.
interfaces:
  main:
    name: Main
    description: Main image interface configurations
    tor-config:
      port-mapping:
        8080: "8080"
        9735: "9735"
        9911: "9911"
        10009: "10009"
    ui: false
    protocols:
      - tcp
      - http
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: "true"
    args: []
    mounts: {}
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: "true"
    args: []
    mounts: {}